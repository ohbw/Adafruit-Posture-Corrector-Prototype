#include <Adafruit_CircuitPlayground.h>

#define VIBRATION_MOTOR_PIN 10    // Pin for the vibration motor
#define SITTING_THRESHOLD 9.3    // Acceleration threshold for detecting sitting (m/s²)
#define MOVEMENT_THRESHOLD 9.5    // Acceleration threshold for detecting movement (m/s²)
#define SITTING_TIME_LIMIT 900000 // 15 minutes in milliseconds
#define BAD_POSTURE_TIME_LIMIT 10000 // 10 seconds in milliseconds
#define SITTING_DETECTION_TIME 5000 // 5 seconds in milliseconds

unsigned long currentMillis = 0; // Variable to store the current time
unsigned long sittingStillStartTime = 0;   // Track when the user stopped moving
unsigned long sittingStartTime = 0;        // Track when the user started sitting
unsigned long badPostureStartTime = 0;     // Track when bad posture starts

// Flags
bool isSitting = false;
bool inBadPosture = false;
bool isStill = false;
bool hasPlayedSound = false;
bool sliderOn = false;

int melodyOption = 0;

float referenceTiltAngle = 90.0; // Default "good" posture angle

float tilt;
float X, Y, Z, totalAccel;

unsigned long previousMillis = 0;
const long interval = 1000;
unsigned long sliderMillis = 0;
const long sliderInterval = 1000;

unsigned long buttonPressMillis = 0;
unsigned long button2PressMillis = 0;

// Function to activate the vibration motor
void activateVibrationMotor() {
  digitalWrite(VIBRATION_MOTOR_PIN, HIGH);  // Turn on the motor
}

// Function to deactivate the vibration motor
void deactivateVibrationMotor() {
  digitalWrite(VIBRATION_MOTOR_PIN, LOW);   // Turn off the motor
}

// Function to set all LEDs to red for bad posture
void setLEDsBadPosture() {
  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, 255, 0, 0);  // Red for bad posture
  }
}

// Function to set all LEDs to green for good posture
void setLEDsGoodPosture() {
  for (int i = 0; i < 10; i++) {
    CircuitPlayground.setPixelColor(i, 0, 255, 0);  // Green for good posture
  }
}

// Function to play melody 1
void playMelody1() {
  int melody1[] = {262, 294, 330};  // C4, D4, E4
  int noteDurations1[] = {500, 500, 500};  // Note durations in ms
  playMelody(melody1, noteDurations1);
}

// Function to play melody 2
void playMelody2() {
  int melody2[] = {392, 440, 494};  // G4, A4, B4
  int noteDurations2[] = {400, 400, 400};  // Note durations in ms
  playMelody(melody2, noteDurations2);
}

// Function to play melody 3
void playMelody3() {
  int melody3[] = {523, 587, 659};  // C5, D5, E5
  int noteDurations3[] = {600, 600, 600};  // Note durations in ms
  playMelody(melody3, noteDurations3);
}

// General function to play melodies
void playMelody(int melody[], int noteDurations[]) {
  for (int i = 0; i < 3; i++) {
    CircuitPlayground.playTone(melody[i], noteDurations[i]);
    delay(noteDurations[i]);  // Add a short pause between notes
  }
}

void setup() {
  CircuitPlayground.begin();             // Initialize Circuit Playground
  Serial.begin(9600);                    // Start Serial communication
  pinMode(VIBRATION_MOTOR_PIN, OUTPUT);  // Set vibration motor pin as output
  digitalWrite(VIBRATION_MOTOR_PIN, LOW); // Turn off vibration motor initially
  CircuitPlayground.clearPixels();       // Clear all LEDs initially
}

void loop() {
  currentMillis = millis();  // Get the current time

  // Check slider value every 1 second
  if (currentMillis - sliderMillis >= sliderInterval) {
    sliderMillis = currentMillis;  // Update the last slider check time
    sliderOn = CircuitPlayground.slideSwitch();  // Read the slider state
  }

  if (sliderOn) {
    currentMillis = millis();  // Get the current time
    if ((currentMillis - previousMillis >= interval)) {
      previousMillis = currentMillis;  // Update the last action time

      // Get accelerometer data for X, Y, Z axes
      X = CircuitPlayground.motionX();
      Y = CircuitPlayground.motionY();
      Z = CircuitPlayground.motionZ();

      // Calculate total acceleration (net acceleration) magnitude
      totalAccel = sqrt(X * X + Y * Y + Z * Z);

      // Print the total net acceleration for debugging
      Serial.print("Total net acceleration: ");
      Serial.println(totalAccel);

      // Calculate current tilt angle
      Z = constrain(Z, -9.8, 9.8);  // Clamp Z value to avoid extreme tilt angles
      tilt = acos(Z / 9.8) * (180.0 / PI);  // Calculate tilt angle in degrees
      Serial.print("Current tilt angle: ");
      Serial.println(tilt);

      // Compare tilt with reference angle to determine posture
      if (abs(tilt - referenceTiltAngle) > 30.0) {  // 30 degrees threshold for bad posture
        if (!inBadPosture) {
          // User just entered bad posture
          inBadPosture = true;
          badPostureStartTime = millis();  // Start bad posture timer
        } else {
          // Check if bad posture has persisted for 10 seconds
          if (millis() - badPostureStartTime >= BAD_POSTURE_TIME_LIMIT) {
            activateVibrationMotor();  // Trigger vibration motor after 10 seconds
            Serial.println("Bad posture detected for more than 10 seconds.");
          }
        }
        setLEDsBadPosture();  // Turn all LEDs red for bad posture
      } else {
        // Good posture
        if (inBadPosture) {
          // Reset bad posture state
          inBadPosture = false;
          badPostureStartTime = 0;
          deactivateVibrationMotor();  // Stop vibration motor
        }
        setLEDsGoodPosture();  // Turn all LEDs green for good posture
      }

      // Check if the user is sitting or moving
      if (totalAccel > MOVEMENT_THRESHOLD) {
        // User is moving, reset still timer
        isStill = false;
        sittingStillStartTime = 0;
        if (isSitting) {
          isSitting = false;
          sittingStartTime = 0;
          hasPlayedSound = false;  // Reset the sound playback flag when the user starts moving
          Serial.println("User is moving. Timer reset.");
        }
      } else {
        // User is still, start or continue the stillness timer
        if (!isStill) {
          isStill = true;
          sittingStillStartTime = millis();  // Start tracking stillness
        }

        // Check if the user has been still for 20 seconds
        if (millis() - sittingStillStartTime >= SITTING_DETECTION_TIME) {
          if (!isSitting) {
            // User just started sitting after being still for 20 seconds
            isSitting = true;
            sittingStartTime = millis();  // Start sitting timer
            Serial.println("User is sitting down. Timer started.");
          }
        }
      }

      // Feedback if sitting too long
      if (isSitting) {
        // Check if the user has been sitting for 15 minutes
        if ((millis() - sittingStartTime >= SITTING_TIME_LIMIT) && !hasPlayedSound) {
          Serial.println("15 minutes of sitting detected. Playing sound.");
          // Play the selected melody
          if (melodyOption == 0) {
            playMelody1();
          } else if (melodyOption == 1) {
            playMelody2();
          } else if (melodyOption == 2) {
            playMelody3();
          }
          hasPlayedSound = true;  // Set flag so the sound plays only once after 15 minutes
        } else if (!hasPlayedSound) {
          Serial.print("Not sitting. Time left: ");
          Serial.print((SITTING_TIME_LIMIT - (millis() - sittingStartTime)) / 1000);
          Serial.println(" seconds.");
        }
      }
    }
  }
  // Melody button press detection
  if (CircuitPlayground.leftButton() && (currentMillis - buttonPressMillis > 300)) {
    melodyOption = (melodyOption + 1) % 3;  // Cycle between 0, 1, and 2
    Serial.print("Melody option selected: ");
    Serial.println(melodyOption);
    buttonPressMillis = currentMillis;  // Update the last button press time
  }

  // Calibration button press detection
  if (CircuitPlayground.rightButton() && (currentMillis - button2PressMillis > 300)) {
    Serial.println("Right button pressed!");
    button2PressMillis = currentMillis;  // Update the last button press time
    referenceTiltAngle = tilt;
    Serial.print("Calibration done: ");
    Serial.print("New reference tilt angle: ");
    Serial.println(referenceTiltAngle);
  }
}
